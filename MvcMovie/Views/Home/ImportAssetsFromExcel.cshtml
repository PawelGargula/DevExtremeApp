@{
    ViewData["Title"] = "Import assets from excel";
}

<style>
    button {
        display: block;
        font-size: 24px;
        margin-top: 10px;
    }

    .not-display {
        display: none;
    }

    div.import-progress {
        text-align: center;
        margin-top: 20px;
    }

    progress[value] {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        border: none;

        display: block;
        margin: 0 auto;
        width: 100%;
        height: 12px;
    }

    progress[value]::-webkit-progress-bar {
        background-color: lightgray;
        border-radius: 2px;
    }

    progress[value]::-webkit-progress-value {
        background-color: #009ca3;
        border-radius: 2px;
    }

    progress[value]::-moz-progress-bar {
        background-color: #009ca3;
        border-radius: 2px;
    }

    .error {
        color: red;
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/jszip.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/xlsx.js"></script>

<h1>Import assets' data from Excel file</h1>
<label for="excel">Choose Excel file</label>
<input type="file" accept='.xlsx, .xls' name="excel" id="excel" />
<button class="import-assets not-display">Import assets</button>
<div class="import-progress not-display">
    <progress aria-label='simulation progress' value="0"></progress>
    <p class="imported-assets-info"></p>
</div>
<p class="error"></p>


<script>
    let parsedData;

    const readExcelInput = document.querySelector("input#excel");
    readExcelInput.addEventListener("change", handleFileUpload);

    const importProgress = document.querySelector("div.import-progress");

    const importAssetsButton = document.querySelector("button.import-assets");
    const errorElement = document.querySelector("p.error");
    importAssetsButton.addEventListener("click", () => {
        if (window.confirm("Are you sure you want to import those assets?")) {
            importAssets();
        }
    });

    function handleFileUpload(e) {
        if (e.target.files[0] === undefined) return;

        DevExpress.ui.notify("Reading file, wait for succeed message", "info", 500);
        importAssetsButton.disabled = true;
        importProgress.classList.add("not-display");

        const reader = new FileReader()
        reader.readAsBinaryString(e.target.files[0])
        reader.onload = (e) => {
            const data = e.target.result;
            const workbook = XLSX.read(data, { type: "binary" });
            const sheetName = workbook.SheetNames[0];
            const sheet = workbook.Sheets[sheetName];
            parsedData = XLSX.utils.sheet_to_json(sheet, { raw: true });
            parsedData.forEach(asset => {
                if (!asset.hasOwnProperty("UnitOfMeasure")) {
                    asset.UnitOfMeasure = "";
                }
                if (!asset.hasOwnProperty("Quantity")) {
                    asset.Quantity = 0;
                }
                if (!asset.hasOwnProperty("Location")) {
                    asset.Location = "";
                }
                if (!asset.hasOwnProperty("ReceivingPersonName")) {
                    asset.ReceivingPersonName = "";
                }
                if (!asset.hasOwnProperty("ReceivingPersonLastName")) {
                    asset.ReceivingPersonLastName = "";
                }
                if (!asset.hasOwnProperty("RecivingPersonPersonalNumber")) {
                    asset.RecivingPersonPersonalNumber = "";
                }
                if (!asset.hasOwnProperty("MPK")) {
                    asset.MPK = "";
                }
                if (!asset.hasOwnProperty("DeactivationDate")) {
                    asset.DeactivationDate = "";
                }
                if (!asset.hasOwnProperty("Street")) {
                    asset.Street = "";
                }
                asset.InventoryMode = asset.InventoryMode === "true"
                asset.IsDeleted = asset.IsDeleted === "true"
            });
            DevExpress.ui.notify("Success, file readed, assets ready to import", "success", 2000);
            importAssetsButton.classList.remove("not-display");
            importAssetsButton.disabled = false;

            console.log(parsedData)
        }
    }

    async function importAssets() {
        try {
            importProgress.classList.remove("not-display");
            errorElement.innerHTML = "";

            const progress = document.querySelector("progress");
            progress.setAttribute("max", parsedData.length);
            const importedAssetsInfo = document.querySelector("p.imported-assets-info");

            readExcelInput.disabled = true;
            importAssetsButton.disabled = true;
            for (let i = 0; i < parsedData.length; i++) {
                const response = await delay(1);
                if (!response?.ok && response !== undefined) {
                    let text = await response?.text();
                    let shortText = text.substring(0, 100);
                    throw new Error(`On asset of id ${parsedData[i].Id} - ${shortText}...`);
                }
                const value = i + 1;
                progress.setAttribute("value", value);
                importedAssetsInfo.textContent = `Imported ${value} of ${parsedData.length} assets`
            }
            DevExpress.ui.notify("Success, all assets imported", "success", 2000);
        } catch (error) {
            const createParagraph = (text) => {
                const paragraph = document.createElement("p");
                paragraph.textContent = text;
                return paragraph;
            }
            errorElement.appendChild(createParagraph(`There was an error: ${error.message}`));
            errorElement.appendChild(createParagraph("Try to correct data and import again or contact with programmer."));
        } finally {
            readExcelInput.disabled = false;
            importAssetsButton.disabled = false;
        }
    }

    function delay(milliseconds) {
        return new Promise(resolve => {
            setTimeout(resolve, milliseconds);
        });
    }
</script>