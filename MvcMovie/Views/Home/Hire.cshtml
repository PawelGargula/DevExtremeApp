@{
    ViewData["Title"] = "Wydanie";
}

<style>
    h1, 
    .form-section {
        padding: 20px;
        border-bottom: 1px solid gray;
    }

    .person-name {
        font-size: 20px;
    }

    .dx-textbox {
        display: inline-block;
    }

    form {
        position: relative;
        padding-top: 20px;
    }

    input.invalid + span.error::after {
        content: "Nie znaleziono";
        color: red;
        font-size: 12px;
        position: absolute;
        top: 0;
        left: 0;
    }

</style>

<h1>Wydanie</h1>

<div class="form-section">
    <h2>Wprowadź osobę odbierającą</h2>
    <form id="person-form">
        <input id="person-searching-text" name="person-searching-text" aria-label="Identyfikator osoby" placeholder="Identyfikator osoby" />
        <span class="error"></span>
        <button type="submit" id="add-person">Dodaj</button>
    </form>
    <p class="person-name">*** ********</p>
    <input type="hidden" id="person-id"/>
</div>

<div class="form-section">
    <h2>Wprowadź obiekty</h2>
    <form id="object-form">
        <input id="object-searching-text" name="object-searching-text" aria-label="Identyfikator obiektu" placeholder="Identyfikator obiektu" />
        <span class="error"></span>
        <button class="inline" type="submit">Dodaj</button>
    </form>
    @(Html.DevExtreme().DataGrid<Organization>()
        .Columns(columns =>
        {
            columns.AddFor(m => m.Id);
            columns.AddFor(m => m.Code);
            columns.AddFor(m => m.Name);
        })
        .DataSource(ds => ds.Array().Key("Id"))
        .Editing(e => e
            .Mode(GridEditMode.Row)
            .AllowUpdating(false)
            .AllowAdding(false)
            .AllowDeleting(true)
        )
        .ID("assets-grid")
    )
</div>


<script>
    class HireModel {
        constructor(personId, assetIds) {
            this.personId = personId,
            this.assetIds = assetIds
        }
    }
    
    const personSearchingTextDOM = document.querySelector("#person-searching-text");
    personSearchingTextDOM.addEventListener("input", (e) => e.target.classList.remove("invalid"));
    personSearchingTextDOM.focus();

    const objectSearchingTextDOM = document.querySelector("#object-searching-text");
    objectSearchingTextDOM.addEventListener("input", (e) => e.target.classList.remove("invalid"));

    const personForm = document.querySelector("form#person-form");
    personForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const personFormData = new FormData(personForm);
        const personSearchingText = personFormData.get("person-searching-text");
        const response = await fetch("@Url.Action("GetPersonBySearchingText", "Person")" + `?searchingText=${personSearchingText}`);
        
        if (response.ok) {
            const data = await response.json();

            const personIdInput = document.querySelector("input#person-id");
            personIdInput.value = data.Id;

            const personData = document.querySelector(".person-name");
            personData.textContent = data.FirstName;

            const addPersonButton = document.querySelector("button#add-person");
            addPersonButton.textContent = "Zmień";
            objectSearchingTextDOM.focus();
        } else {
            personSearchingTextDOM.classList.add("invalid");
        }
    });

    const objectForm = document.querySelector("form#object-form");
    objectForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const objectFormData = new FormData(objectForm);
        const objectSearchingText = objectFormData.get("object-searching-text");
        const response = await fetch("@Url.Action("GetOrganizationBySearchingText", "Organization")" + `?searchingText=${objectSearchingText}`);
        
        if (response.ok) {
            const data = await response.json();
            const getDataGrid = () => $("#assets-grid").dxDataGrid().dxDataGrid("instance");
            const getDataSource = () => getDataGrid().getDataSource();
            const dataSource = getDataSource();
            dataSource.store().insert(data).then(function() {
                dataSource.reload();
            });
            objectSearchingTextDOM.value = "";
            objectSearchingTextDOM.focus();
        } else {
            objectSearchingTextDOM.classList.add("invalid");
        }
    });
    
</script>